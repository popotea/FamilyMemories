@model IEnumerable<FamilyMemories.Models.Memory>

@{
    ViewData["Title"] = "";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="admin-card">
    <div class="d-flex justify-content-end align-items-center mb-3 flex-wrap">
        <div class="admin-controls">
            <input id="searchInput" class="form-control form-control-sm search-input" placeholder="搜尋標題或描述" />
            <select id="pageSize" class="form-select form-select-sm ms-2" style="width:auto;">
                <option value="10">10 / page</option>
                <option value="25">25 / page</option>
                <option value="50">50 / page</option>
                <option value="all">全部</option>
            </select>
            <button id="batchEditBtn" class="btn btn-sm btn-primary ms-2" disabled>批次編輯</button>
            <button id="deleteSelectedBtn" class="btn btn-sm btn-danger ms-2" disabled>刪除選取</button>
        </div>
    </div>

    <div class="table-responsive">
        <table id="memoriesTable" class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th style="width:40px"><input type="checkbox" id="selectAll" /></th>
                    <th style="width:72px">縮圖</th>
                    <th>標題</th>
                    <th>描述</th>
                    <th style="width:120px">日期</th>
                    <th style="width:140px">操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var m in Model.OrderByDescending(x => x.Date))
                {
                    var imgUrl = m.ImagePath?.StartsWith("http") == true ? m.ImagePath : Url.Content("~/uploads/" + m.ImagePath);
                    <tr data-id="@m.Id">
                        <td><input type="checkbox" class="select-chk" data-id="@m.Id" /></td>
                        <td>
                            <img src="@imgUrl" alt="@m.Title" class="img-thumb" />
                        </td>
                        <td>
                            <div class="memory-title" data-id="@m.Id">@m.Title</div>
                        </td>
                        <td>
                            <div class="memory-desc text-muted small" data-id="@m.Id">@m.Description</div>
                        </td>
                        <td>
                            <div class="memory-date" data-id="@m.Id">@m.Date.ToString("yyyy-MM-dd")</div>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" onclick="openEditModal(@m.Id)">編輯</button>
                                <a asp-controller="Memories" asp-action="Edit" asp-route-id="@m.Id" class="btn btn-sm btn-outline-secondary">完整編輯</a>
                                <button class="btn btn-sm btn-outline-danger" onclick="confirmDelete(@m.Id)">刪除</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <nav aria-label="Page navigation" class="mt-3">
        <ul id="pagination" class="pagination pagination-sm"></ul>
    </nav>
</div>

<!-- Edit Modal (single) -->
<div class="modal fade" id="editMemoryModal" tabindex="-1" aria-labelledby="editMemoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMemoryModalLabel">編輯回憶</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editId" />
                <div class="mb-3">
                    <label class="form-label">標題</label>
                    <input id="editTitle" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">描述</label>
                    <textarea id="editDescription" class="form-control" rows="4"></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label">圖片（選填，會替換）</label>
                    <input id="editImage" type="file" accept="image/*" class="form-control form-control-sm" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" id="saveEditBtn">儲存</button>
            </div>
        </div>
    </div>
</div>

<!-- Batch Edit Modal -->
<div class="modal fade" id="batchEditModal" tabindex="-1" aria-labelledby="batchEditModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="batchEditModalLabel">批次編輯</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>已選取 <span id="batchCount">0</span> 筆。可逐筆編輯標題、描述，或上傳新圖片來替換。</p>
                <div id="batchItemsContainer" class="row g-3"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" id="applyBatchBtn">套用變更</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
// Client-side search, pagination and batch actions (keeps previous functionality)
(function () {
 const table = document.getElementById('memoriesTable');
 const tbody = table.querySelector('tbody');
 let rows = Array.from(tbody.querySelectorAll('tr'));
 let filteredRows = rows.slice();
 let currentPage =1;

 function getPageSize() {
 const v = document.getElementById('pageSize').value;
 return v === 'all' ? Infinity : parseInt(v,10);
 }

 function renderPagination() {
 const pageSize = getPageSize();
 const total = filteredRows.length;
 const pagination = document.getElementById('pagination');
 pagination.innerHTML = '';
 if (pageSize === Infinity || total <= pageSize) return;
 const totalPages = Math.max(1, Math.ceil(total / pageSize));
 currentPage = Math.min(currentPage, totalPages);

 // prev
 const prevLi = document.createElement('li');
 prevLi.className = 'page-item ' + (currentPage ===1 ? 'disabled' : '');
 prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage -1}">«</a>`;
 pagination.appendChild(prevLi);

 // pages (show up to7)
 const maxPages =7;
 let start = Math.max(1, currentPage - Math.floor(maxPages /2));
 let end = Math.min(totalPages, start + maxPages -1);
 if (end - start < maxPages -1) start = Math.max(1, end - maxPages +1);

 for (let i = start; i <= end; i++) {
 const li = document.createElement('li');
 li.className = 'page-item ' + (i === currentPage ? 'active' : '');
 li.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
 pagination.appendChild(li);
 }

 // next
 const nextLi = document.createElement('li');
 nextLi.className = 'page-item ' + (currentPage === totalPages ? 'disabled' : '');
 nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage +1}">»</a>`;
 pagination.appendChild(nextLi);

 // click handler
 pagination.querySelectorAll('a.page-link').forEach(a => {
 a.addEventListener('click', function (e) {
 e.preventDefault();
 const p = parseInt(this.getAttribute('data-page'));
 if (!isNaN(p)) {
 currentPage = p;
 applyPagination();
 }
 });
 });
 }

 function applyPagination() {
 const pageSize = getPageSize();
 rows.forEach(r => r.style.display = 'none');
 if (pageSize === Infinity) {
 filteredRows.forEach(r => r.style.display = 'table-row');
 renderPagination();
 return;
 }
 const start = (currentPage -1) * pageSize;
 const end = start + pageSize;
 filteredRows.slice(start, end).forEach(r => r.style.display = 'table-row');
 renderPagination();
 }

 function applyFilter() {
 const q = document.getElementById('searchInput').value.trim().toLowerCase();
 filteredRows = rows.filter(r => {
 const title = r.querySelector('.memory-title')?.textContent.trim().toLowerCase() || '';
 const desc = r.querySelector('.memory-desc')?.textContent.trim().toLowerCase() || '';
 return title.includes(q) || desc.includes(q);
 });
 currentPage =1;
 applyPagination();
 }

 document.getElementById('searchInput').addEventListener('input', function () {
 applyFilter();
 });
 document.getElementById('pageSize').addEventListener('change', function () {
 currentPage =1;
 applyPagination();
 });

 // selection and batch delete
 function updateControlsState() {
 const selected = Array.from(document.querySelectorAll('.select-chk:checked')).map(i => i.getAttribute('data-id'));
 const any = selected.length >0;
 document.getElementById('deleteSelectedBtn').disabled = !any;
 document.getElementById('batchEditBtn').disabled = !any;
 return selected;
 }

 document.getElementById('selectAll').addEventListener('change', function () {
 const checked = this.checked;
 document.querySelectorAll('.select-chk').forEach(c => c.checked = checked);
 updateControlsState();
 });

 document.querySelectorAll('.select-chk').forEach(c => c.addEventListener('change', updateControlsState));

 document.getElementById('deleteSelectedBtn').addEventListener('click', async function () {
 const ids = updateControlsState();
 if (ids.length ===0) return;
 if (!confirm(`確定要刪除 ${ids.length} 筆回憶？`)) return;
 this.disabled = true;
 try {
 for (const id of ids) {
 const res = await fetch(`/api/memories/${id}`, { method: 'DELETE', credentials: 'same-origin' });
 if (res.ok) {
 const tr = document.querySelector(`tr[data-id='${id}']`);
 if (tr) tr.remove();
 } else {
 console.error('delete failed', id, res.status);
 }
 }
 // rebuild rows list
 rows = Array.from(tbody.querySelectorAll('tr'));
 filteredRows = rows.slice();
 applyPagination();
 } catch (e) {
 console.error(e);
 alert('批次刪除發生錯誤');
 } finally {
 this.disabled = false;
 document.getElementById('selectAll').checked = false;
 updateControlsState();
 }
 });

 // Batch Edit flow
 document.getElementById('batchEditBtn').addEventListener('click', function () {
 const ids = updateControlsState();
 if (ids.length ===0) return;
 const container = document.getElementById('batchItemsContainer');
 container.innerHTML = '';
 document.getElementById('batchCount').textContent = ids.length;
 ids.forEach(id => {
 const tr = document.querySelector(`tr[data-id='${id}']`);
 const title = tr.querySelector('.memory-title').textContent.trim();
 const desc = tr.querySelector('.memory-desc').textContent.trim();
 const imgSrc = tr.querySelector('img.img-thumb').getAttribute('src');

 const col = document.createElement('div');
 col.className = 'col-12 col-md-6';
 col.innerHTML = `
 <div class="admin-card p-2">
 <input type="hidden" class="batch-id" value="${id}" />
 <div class="d-flex gap-2">
 <img src="${imgSrc}" class="img-thumb" />
 <div class="flex-grow-1">
 <input class="form-control form-control-sm batch-title mb-1" value="${escapeHtml(title)}" />
 <textarea class="form-control form-control-sm batch-desc" rows="2">${escapeHtml(desc)}</textarea>
 <div class="mt-1">
 <label class="form-label small">替換圖片（選填）</label>
 <input type="file" class="form-control form-control-sm batch-image" accept="image/*" />
 </div>
 </div>
 </div>
 </div>
 `;
 container.appendChild(col);
 });
 var modal = new bootstrap.Modal(document.getElementById('batchEditModal'));
 modal.show();
 });

 async function uploadImageForId(id, file) {
 const form = new FormData();
 form.append('file', file);
 const res = await fetch(`/api/memories/${id}/image`, { method: 'POST', credentials: 'same-origin', body: form });
 if (!res.ok) throw new Error('Upload failed: ' + res.status);
 const json = await res.json();
 return json.imagePath || json.fileName;
 }

 document.getElementById('applyBatchBtn').addEventListener('click', async function () {
 const items = Array.from(document.querySelectorAll('#batchItemsContainer .admin-card')).map(card => {
 const id = parseInt(card.querySelector('.batch-id').value);
 const title = card.querySelector('.batch-title').value.trim();
 const desc = card.querySelector('.batch-desc').value.trim();
 const fileInput = card.querySelector('.batch-image');
 const file = fileInput && fileInput.files && fileInput.files[0] ? fileInput.files[0] : null;
 return { id, title, desc, file };
 });
 if (items.length ===0) return;
 this.disabled = true;
 try {
 // First upload images (sequential to avoid server overload)
 for (const it of items) {
 if (it.file) {
 const imagePath = await uploadImageForId(it.id, it.file);
 it.imagePath = imagePath;
 }
 }
 // Prepare batch payload
 const payload = { items: items.map(i => ({ id: i.id, title: i.title, description: i.desc, imagePath: i.imagePath })) };
 const res = await fetch('/api/memories/batch', { method: 'POST', credentials: 'same-origin', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
 if (res.ok) {
 // update table UI
 for (const it of items) {
 const tr = document.querySelector(`tr[data-id='${it.id}']`);
 if (!tr) continue;
 if (it.title) tr.querySelector('.memory-title').textContent = it.title;
 if (it.desc) tr.querySelector('.memory-desc').textContent = it.desc;
 if (it.imagePath) tr.querySelector('img.img-thumb').src = '/uploads/' + it.imagePath;
 }
 // close modal
 var modalEl = document.getElementById('batchEditModal');
 var modal = bootstrap.Modal.getInstance(modalEl);
 modal.hide();
 } else {
 const text = await res.text();
 alert('批次更新失敗: ' + text);
 }
 } catch (e) {
 console.error(e);
 alert('批次處理發生錯誤');
 } finally {
 this.disabled = false;
 }
});

 // utilities
 function escapeHtml(str) {
 return str.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('"', '&quot;');
 }

 // initialize
 applyFilter();
})();

// Existing edit / patch / delete functions (unchanged)
async function openEditModal(id) {
 try {
 const res = await fetch(`/api/memories/${id}`, { method: 'GET', credentials: 'same-origin' });
 if (!res.ok) {
 alert('讀取資料失敗');
 return;
 }
 const data = await res.json();
 document.getElementById('editId').value = data.id;
 document.getElementById('editTitle').value = data.title || '';
 document.getElementById('editDescription').value = data.description || '';
 var modal = new bootstrap.Modal(document.getElementById('editMemoryModal'));
 modal.show();
 } catch (e) {
 console.error(e);
 alert('發生錯誤');
 }
}

document.getElementById('saveEditBtn').addEventListener('click', async function () {
 const id = document.getElementById('editId').value;
 const payload = {
 title: document.getElementById('editTitle').value,
 description: document.getElementById('editDescription').value
 };

 try {
 // If image selected, upload first
 const fileInput = document.getElementById('editImage');
 let imagePath = null;
 if (fileInput && fileInput.files && fileInput.files[0]) {
 const form = new FormData();
 form.append('file', fileInput.files[0]);
 const uploadRes = await fetch(`/api/memories/${id}/image`, { method: 'POST', credentials: 'same-origin', body: form });
 if (uploadRes.ok) {
 const j = await uploadRes.json();
 imagePath = j.imagePath || j.fileName;
 }
 }

 const body = JSON.stringify(payload);
 const res = await fetch(`/api/memories/${id}`, {
 method: 'PATCH',
 credentials: 'same-origin',
 headers: { 'Content-Type': 'application/json' },
 body
 });
 if (res.ok) {
 const titleEl = document.querySelector('.memory-title[data-id="' + id + '"]');
 const descEl = document.querySelector('.memory-desc[data-id="' + id + '"]');
 if (titleEl) titleEl.textContent = payload.title;
 if (descEl) descEl.textContent = payload.description;
 if (imagePath) {
 const img = document.querySelector(`tr[data-id='${id}'] img.img-thumb`);
 if (img) img.src = '/uploads/' + imagePath;
 }
 var modalEl = document.getElementById('editMemoryModal');
 var modal = bootstrap.Modal.getInstance(modalEl);
 modal.hide();
 } else {
 const text = await res.text();
 alert('更新失敗: ' + text);
 }
 } catch (e) {
 console.error(e);
 alert('更新發生錯誤');
 }
});

async function confirmDelete(id) {
 if (!confirm('確定要刪除此回憶？')) return;
 try {
 const res = await fetch(`/api/memories/${id}`, { method: 'DELETE', credentials: 'same-origin' });
 if (res.ok) {
 const tr = document.getElementById('memory-row-' + id) || document.querySelector(`tr[data-id='${id}']`);
 if (tr) tr.remove();
 } else {
 alert('刪除失敗');
 }
 } catch (e) {
 console.error(e);
 alert('刪除發生錯誤');
 }
}
</script>
}
