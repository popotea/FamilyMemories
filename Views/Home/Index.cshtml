@{
    ViewData["Title"] = "當我們彤再一起";
    Layout = null; 
}

<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <link rel="stylesheet" href="~/css/gallery.css" asp-append-version="true" />
    <style>
        .gallery-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
        }

        .photo-card {
            position: relative;
            overflow: hidden;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .photo-card:hover {
            transform: translateY(-5px);
        }

        .photo-card img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .photo-card:hover img {
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <!-- 新增回憶按鈕 (只有登入用戶才顯示) -->
    @if (User.Identity.IsAuthenticated)
    {
        <a asp-page="Memories/Create" class="add-memory-btn" title="新增回憶">
            <svg class="icon-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
        </a>
    }



    <!-- 頂部標題欄 -->
    <div class="header">
        <h1>@Model.WelcomeMessage</h1>
        <p>@Model.AppDescription</p>
        <div class="filter-container" id="filterContainer">
            <!-- 篩選按鈕將由 JS 動態生成 -->
        </div>
    </div>

    <!-- 相片網格 -->
    <div class="gallery-container">
        <div class="gallery-grid" id="galleryGrid">
            <!-- 相片卡片將由 JS 動態生成 -->
        </div>
        <div class="empty-state" id="emptyState" style="display: none;">
            沒有找到相關回憶
        </div>
    </div>

    <!-- Modal 全螢幕檢視 -->
    <div class="modal" id="photoModal">
        <button class="modal-btn modal-close" id="modalClose">
            <svg class="icon-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
        <button class="modal-btn modal-prev" id="modalPrev">
            <svg class="icon-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
            </svg>
        </button>
        <button class="modal-btn modal-next" id="modalNext">
            <svg class="icon-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
        </button>

        <div class="modal-content">
            <div class="modal-image-container">
                <img class="modal-image" id="modalImage" src="" alt="">
            </div>
            <div class="modal-info">
                <div class="modal-member-tag">
                    <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                    <span id="modalMember"></span>
                </div>
                <div class="modal-date">
                    <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    <span id="modalDate"></span>
                </div>
                <h2 class="modal-title" id="modalTitle"></h2>
                <p class="modal-description" id="modalDescription"></p>
                <div class="modal-footer">
                    <span id="modalCounter"></span>
                    <svg class="icon-lg heart-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                    </svg>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Memory Modal -->
    <div class="modal fade" id="editMemoryModal" tabindex="-1" aria-labelledby="editMemoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editMemoryModalLabel">編輯回憶</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editMemoryForm">
                        <input type="hidden" id="editMemoryId">
                        <div class="mb-3">
                            <label for="editMemoryTitle" class="form-label">標題</label>
                            <input type="text" class="form-control" id="editMemoryTitle" required>
                        </div>
                        <div class="mb-3">
                            <label for="editMemoryDescription" class="form-label">描述</label>
                            <textarea class="form-control" id="editMemoryDescription" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editMemoryDate" class="form-label">日期</label>
                            <input type="date" class="form-control" id="editMemoryDate" required>
                        </div>
                        <div class="mb-3">
                            <label for="editMemoryMember" class="form-label">成員</label>
                            <input type="text" class="form-control" id="editMemoryMember" required>
                        </div>
                        <div class="mb-3">
                            <label for="editMemoryImage" class="form-label">目前圖片</label>
                            <img id="currentMemoryImage" src="" class="img-fluid mb-2" alt="Current Memory Image">
                            <label for="editMemoryImageFile" class="form-label">上傳新圖片 (可選)</label>
                            <input class="form-control" type="file" id="editMemoryImageFile">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                    <button type="submit" form="editMemoryForm" class="btn btn-primary">儲存變更</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            const photos = @Html.Raw(Json.Serialize(Model.Photos));
            const isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
            const currentUserId = "@Model.CurrentUserId";

            let currentFilter = 'all';
            let currentPhotoIndex = 0;
            let filteredPhotos = photos;
            let currentPage = 1;
            let isLoading = false;

            // 取得所有成員
            const members = ['all', ...new Set(photos.map(p => p.member))];

            // 初始化篩選器
            function initFilters() {
                const filterContainer = $('#filterContainer');
                filterContainer.empty();

                members.forEach(member => {
                    const btn = $('<button>')
                        .addClass('filter-btn')
                        .text(member === 'all' ? '全部' : member)
                        .data('member', member)
                        .on('click', function() {
                            currentFilter = $(this).data('member');
                            $('.filter-btn').removeClass('active');
                            $(this).addClass('active');
                            renderGallery();
                        });

                    if (member === 'all') {
                        btn.addClass('active');
                    }

                    filterContainer.append(btn);
                });
            }

            // 渲染相片網格
            function renderGallery() {
                filteredPhotos = currentFilter === 'all'
                    ? photos
                    : photos.filter(p => p.member === currentFilter);

                const gallery = $('#galleryGrid');
                gallery.empty();

                if (filteredPhotos.length === 0) {
                    $('#emptyState').show();
                    return;
                }

                $('#emptyState').hide();

                filteredPhotos.forEach((photo, index) => {
                    let cardHtml = `
                        <div class="photo-card" data-index="${index}">
                            <img src="${photo.imageUrl}" alt="${photo.title}">
                            <div class="photo-overlay"></div>
                            <div class="photo-info">
                                <div class="photo-tags">
                                    <span class="photo-member">${photo.member}</span>
                                    <span class="photo-date">${photo.date}</span>
                                </div>
                                <h3 class="photo-title">${photo.title}</h3>
                                <p class="photo-description">${photo.description}</p>
                            </div>
                            ${photo.isEditable ? `<button class="edit-btn" data-photo-id="${photo.id}" title="編輯回憶"><svg class="icon-sm" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg></button>` : ''}
                        </div>
                    `;

                    const card = $(cardHtml);

                    card.find('.edit-btn').on('click', function() {
                        openEditModal($(this).data('photo-id'));
                    });

                    card.on('click', function(e) {
                        if (!$(e.target).closest('.edit-btn').length) {
                            openModal($(this).data('index'));
                        }
                    });

                    gallery.append(card);
                });
            }

            // 開啟 Modal
            function openModal(index) {
                currentPhotoIndex = index;
                updateModal();
                $('#photoModal').addClass('active');
                $('body').css('overflow', 'hidden');
            }

            // 關閉 Modal
            function closeModal() {
                $('#photoModal').removeClass('active');
                $('body').css('overflow', 'auto');
            }

            // 更新 Modal 內容
            function updateModal() {
                const photo = filteredPhotos[currentPhotoIndex];
                $('#modalImage').attr('src', photo.imageUrl).attr('alt', photo.title);
                $('#modalMember').text(photo.member);
                $('#modalDate').text(photo.date);
                $('#modalTitle').text(photo.title);
                $('#modalDescription').text(photo.description);
                $('#modalCounter').text(`#${currentPhotoIndex + 1} / ${filteredPhotos.length}`);
            }

            // 上一張
            function prevPhoto() {
                currentPhotoIndex = (currentPhotoIndex - 1 + filteredPhotos.length) % filteredPhotos.length;
                updateModal();
            }

            // 下一張
            function nextPhoto() {
                currentPhotoIndex = (currentPhotoIndex + 1) % filteredPhotos.length;
                updateModal();
            }

            // 事件綁定
            $('#modalClose').on('click', closeModal);
            $('#modalPrev').on('click', prevPhoto);
            $('#modalNext').on('click', nextPhoto);

            // 鍵盤事件
            $(document).on('keydown', function(e) {
                if ($('#photoModal').hasClass('active')) {
                    if (e.key === 'Escape') closeModal();
                    if (e.key === 'ArrowLeft') prevPhoto();
                    if (e.key === 'ArrowRight') nextPhoto();
                }
            });

            // 點擊背景關閉
            $('#photoModal').on('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });

            function openEditModal(photoId) {
                const photo = photos.find(p => p.id === photoId);
                if (photo) {
                    $('#editMemoryId').val(photo.id);
                    $('#editMemoryTitle').val(photo.title);
                    $('#editMemoryDescription').val(photo.description);
                    $('#editMemoryDate').val(photo.date.substring(0, 10).replace('年', '-').replace('月', '-').replace('日', ''));
                    $('#editMemoryMember').val(photo.member);
                    $('#currentMemoryImage').attr('src', photo.imageUrl);
                    const editModal = new bootstrap.Modal(document.getElementById('editMemoryModal'));
                    editModal.show();
                }
            }

            $('#editMemoryForm').on('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                const memoryId = parseInt($('#editMemoryId').val());

                fetch('/api/memories/update', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Memory updated successfully.') {
                        const updatedPhotoIndex = photos.findIndex(p => p.id === memoryId);
                        if (updatedPhotoIndex > -1) {
                            const updatedPhoto = photos[updatedPhotoIndex];
                            updatedPhoto.title = $('#editMemoryTitle').val();
                            updatedPhoto.description = $('#editMemoryDescription').val();
                            updatedPhoto.date = new Date($('#editMemoryDate').val()).toLocaleDateString('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\//g, '年');
                            updatedPhoto.member = $('#editMemoryMember').val();

                            const imageFile = $('#editMemoryImageFile')[0].files[0];
                            if(imageFile){
                                updatedPhoto.imageUrl = URL.createObjectURL(imageFile);
                            }
                        }
                        renderGallery();
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editMemoryModal'));
                        editModal.hide();
                    } else {
                        alert('Error updating memory.');
                    }
                })
                .catch(error => console.error('Error:', error));
            });

            $(window).on('scroll', function() {
                if ($(window).scrollTop() + $(window).height() >= $(document).height() - 100 && !isLoading) {
                    loadMorePhotos();
                }
            });

            function loadMorePhotos() {
                isLoading = true;
                currentPage++;
                fetch(`/api/memories?page=${currentPage}`)
                    .then(response => response.json())
                    .then(newPhotos => {
                        if (newPhotos.length > 0) {
                            photos.push(...newPhotos);
                            renderGallery();
                        }
                        isLoading = false;
                    })
                    .catch(error => {
                        console.error('Error fetching more photos:', error);
                        isLoading = false;
                    });
            }

            // 初始化
            initFilters();
            renderGallery();
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>
